
teclaTiempo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800200  000003c4  00000458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  0080026a  0080026a  000004c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f8e  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cac  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000303  00000000  00000000  00002dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000030c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c1       	rjmp	.+636    	; 0x2d2 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ec       	ldi	r30, 0xC4	; 196
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 36       	cpi	r26, 0x6A	; 106
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e6       	ldi	r26, 0x6A	; 106
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 39       	cpi	r26, 0x9C	; 156
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	99 d0       	rcall	.+306    	; 0x252 <main>
 120:	4f c1       	rjmp	.+670    	; 0x3c0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Timer0_init>:
    	}
    }
}
void Timer0_init( void )
{
	TCCR0B = (3<<CS00);
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 128:	16 bc       	out	0x26, r1	; 38
	OCR0A = 25-1;
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCCR0A = (2<<WGM00);
 134:	84 bd       	out	0x24, r24	; 36
	sei();
 136:	78 94       	sei
 138:	08 95       	ret

0000013a <enterVars_init>:
}
void enterVars_init( void )
{
	mdSeg = 0;
 13a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <mdSeg+0x1>
 13e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <mdSeg>
	mSeg = 0;
 142:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <mSeg+0x1>
 146:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <mSeg>
	flag500 = 0;
 14a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <flag500+0x1>
 14e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <flag500>
 152:	08 95       	ret

00000154 <countVars_init>:
}
void countVars_init( void )
{
	pressedFlag = 0;
 154:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <__data_end+0x1>
 158:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <__data_end>
	errorFlag = 0;
 15c:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <errorFlag+0x1>
 160:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <errorFlag>
 164:	08 95       	ret

00000166 <UART0_init>:
}
void UART0_init( void )
{
	UBRR0 = 103;
 166:	87 e6       	ldi	r24, 0x67	; 103
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 16e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0A = (1<<U2X0);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 178:	88 e1       	ldi	r24, 0x18	; 24
 17a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 184:	08 95       	ret

00000186 <UART0_putchar>:
	while( *str )
		UART0_putchar( *str++ );
}
void UART0_putchar( char dato )
{
	while( !(UCSR0A&(1<<UDRE0)) );
 186:	e0 ec       	ldi	r30, 0xC0	; 192
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	95 ff       	sbrs	r25, 5
 18e:	fd cf       	rjmp	.-6      	; 0x18a <UART0_putchar+0x4>
	UDR0 = dato;
 190:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 194:	08 95       	ret

00000196 <UART0_puts>:
	UCSR0A = (1<<U2X0);
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
	UCSR0C = (3<<UCSZ00);
}
void UART0_puts( char *str )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	while( *str )
 19c:	88 81       	ld	r24, Y
 19e:	88 23       	and	r24, r24
 1a0:	29 f0       	breq	.+10     	; 0x1ac <UART0_puts+0x16>
		UART0_putchar( *str++ );
 1a2:	21 96       	adiw	r28, 0x01	; 1
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
	UCSR0C = (3<<UCSZ00);
}
void UART0_puts( char *str )
{
	while( *str )
 1a4:	f0 df       	rcall	.-32     	; 0x186 <UART0_putchar>
 1a6:	89 91       	ld	r24, Y+
 1a8:	81 11       	cpse	r24, r1
		UART0_putchar( *str++ );
}
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <UART0_puts+0xe>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <UART0_getchar>:
	while( !(UCSR0A&(1<<UDRE0)) );
	UDR0 = dato;
}
char UART0_getchar( void )
{
	while( !(UCSR0A&(1<<RXC0)) );
 1b2:	e0 ec       	ldi	r30, 0xC0	; 192
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	ec f7       	brge	.-6      	; 0x1b6 <UART0_getchar+0x4>
	return UDR0;
 1bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 1c0:	08 95       	ret

000001c2 <itoa>:
void itoa( char *str, uint16_t num, uint8_t base)
{
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	fc 01       	movw	r30, r24
 1d4:	cb 01       	movw	r24, r22
 1d6:	8f 01       	movw	r16, r30
 1d8:	ef 01       	movw	r28, r30
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
	char auxNum;
	uint16_t aux, i = 0, j = 0;
	do{
		aux = num/base;
 1de:	c4 2e       	mov	r12, r20
 1e0:	d1 2c       	mov	r13, r1
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <itoa+0x24>
 1e4:	9a 01       	movw	r18, r20
 1e6:	79 01       	movw	r14, r18
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	e4 1a       	sub	r14, r20
 1ec:	f1 08       	sbc	r15, r1
 1ee:	b6 01       	movw	r22, r12
 1f0:	d3 d0       	rcall	.+422    	; 0x398 <__udivmodhi4>
		( (num%=base)>9 )? (str[j++] = num+'7') : (str[j++] = num+'0');
 1f2:	8a 30       	cpi	r24, 0x0A	; 10
 1f4:	91 05       	cpc	r25, r1
 1f6:	18 f0       	brcs	.+6      	; 0x1fe <itoa+0x3c>
 1f8:	89 5c       	subi	r24, 0xC9	; 201
 1fa:	88 83       	st	Y, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <itoa+0x40>
 1fe:	80 5d       	subi	r24, 0xD0	; 208
 200:	88 83       	st	Y, r24
 202:	a9 01       	movw	r20, r18
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	21 96       	adiw	r28, 0x01	; 1
		num = aux;
 20a:	86 2f       	mov	r24, r22
 20c:	97 2f       	mov	r25, r23
	}while( num );
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	49 f7       	brne	.-46     	; 0x1e4 <itoa+0x22>
	str[j--] = '\0';
 212:	df 01       	movw	r26, r30
 214:	a2 0f       	add	r26, r18
 216:	b3 1f       	adc	r27, r19
 218:	1c 92       	st	X, r1

	while( i<j )
 21a:	e1 14       	cp	r14, r1
 21c:	f1 04       	cpc	r15, r1
 21e:	81 f0       	breq	.+32     	; 0x240 <itoa+0x7e>
 220:	fd 01       	movw	r30, r26
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
	{
		auxNum = str[i];
 226:	d8 01       	movw	r26, r16
 228:	2c 91       	ld	r18, X
		str[i++] = str[j];
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	32 91       	ld	r19, -Z
 22e:	3d 93       	st	X+, r19
 230:	8d 01       	movw	r16, r26
		str[j--] = auxNum; 
 232:	20 83       	st	Z, r18
		( (num%=base)>9 )? (str[j++] = num+'7') : (str[j++] = num+'0');
		num = aux;
	}while( num );
	str[j--] = '\0';

	while( i<j )
 234:	97 01       	movw	r18, r14
 236:	28 1b       	sub	r18, r24
 238:	39 0b       	sbc	r19, r25
 23a:	82 17       	cp	r24, r18
 23c:	93 07       	cpc	r25, r19
 23e:	98 f3       	brcs	.-26     	; 0x226 <itoa+0x64>
	{
		auxNum = str[i];
		str[i++] = str[j];
		str[j--] = auxNum; 
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	08 95       	ret

00000252 <main>:
char strMseg[20];
char strMdseg[20];
int main(void)
{
	Timer0_init();
    UART0_init();
 252:	68 df       	rcall	.-304    	; 0x124 <Timer0_init>
 254:	88 df       	rcall	.-240    	; 0x166 <UART0_init>
    	enterVars_init();
    	while( !flag500 );
    	UART0_puts("\n\rPresiona una tecla");
    	countVars_init();
    	UART0_getchar();
    	pressedFlag = 1;
 256:	c1 e0       	ldi	r28, 0x01	; 1
	Timer0_init();
    UART0_init();

    while (1) 
    {
    	UART0_puts("\n\rPresiona <enter> para iniciar");
 258:	d0 e0       	ldi	r29, 0x00	; 0
    	while(  UART0_getchar() != 13 );
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	9b df       	rcall	.-202    	; 0x196 <UART0_puts>
    	enterVars_init();
 260:	a8 df       	rcall	.-176    	; 0x1b2 <UART0_getchar>
 262:	8d 30       	cpi	r24, 0x0D	; 13
    	while( !flag500 );
 264:	e9 f7       	brne	.-6      	; 0x260 <main+0xe>
 266:	69 df       	rcall	.-302    	; 0x13a <enterVars_init>
 268:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <flag500>
    	UART0_puts("\n\rPresiona una tecla");
 26c:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <flag500+0x1>
 270:	89 2b       	or	r24, r25
    	countVars_init();
 272:	d1 f3       	breq	.-12     	; 0x268 <main+0x16>
 274:	80 e2       	ldi	r24, 0x20	; 32
    	UART0_getchar();
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	8e df       	rcall	.-228    	; 0x196 <UART0_puts>
    	pressedFlag = 1;
 27a:	6c df       	rcall	.-296    	; 0x154 <countVars_init>
 27c:	9a df       	rcall	.-204    	; 0x1b2 <UART0_getchar>
 27e:	d0 93 6b 02 	sts	0x026B, r29	; 0x80026b <__data_end+0x1>
    	if( errorFlag )
 282:	c0 93 6a 02 	sts	0x026A, r28	; 0x80026a <__data_end>
 286:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <errorFlag>
    	{
    		UART0_puts("\n\rError, intentelo de nuevo.");
 28a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <errorFlag+0x1>
 28e:	89 2b       	or	r24, r25
 290:	21 f0       	breq	.+8      	; 0x29a <main+0x48>
    	}else
    	{
    		
    		itoa(strMseg, mSeg,10);
 292:	85 e3       	ldi	r24, 0x35	; 53
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	7f df       	rcall	.-258    	; 0x196 <UART0_puts>
 298:	e0 cf       	rjmp	.-64     	; 0x25a <main+0x8>
 29a:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <mSeg>
 29e:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <mSeg+0x1>
    		itoa(strMdseg, mdSeg,10);
 2a2:	4a e0       	ldi	r20, 0x0A	; 10
 2a4:	84 e7       	ldi	r24, 0x74	; 116
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	8c df       	rcall	.-232    	; 0x1c2 <itoa>
    		UART0_puts("\n\rTecla presionada en: ");
 2aa:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <mdSeg>
 2ae:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <mdSeg+0x1>
    		UART0_puts(strMseg);
 2b2:	4a e0       	ldi	r20, 0x0A	; 10
 2b4:	88 e8       	ldi	r24, 0x88	; 136
 2b6:	92 e0       	ldi	r25, 0x02	; 2
 2b8:	84 df       	rcall	.-248    	; 0x1c2 <itoa>
    		UART0_putchar('.');
 2ba:	82 e5       	ldi	r24, 0x52	; 82
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	6b df       	rcall	.-298    	; 0x196 <UART0_puts>
    		UART0_puts(strMdseg);
 2c0:	84 e7       	ldi	r24, 0x74	; 116
 2c2:	92 e0       	ldi	r25, 0x02	; 2
 2c4:	68 df       	rcall	.-304    	; 0x196 <UART0_puts>
 2c6:	8e e2       	ldi	r24, 0x2E	; 46
 2c8:	5e df       	rcall	.-324    	; 0x186 <UART0_putchar>
 2ca:	88 e8       	ldi	r24, 0x88	; 136
 2cc:	92 e0       	ldi	r25, 0x02	; 2
 2ce:	63 df       	rcall	.-314    	; 0x196 <UART0_puts>
 2d0:	c4 cf       	rjmp	.-120    	; 0x25a <main+0x8>

000002d2 <__vector_21>:
		str[i++] = str[j];
		str[j--] = auxNum; 
	}
}
ISR( TIMER0_COMPA_vect )
{
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
	mdSeg++;
 2e2:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mdSeg>
 2e6:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <mdSeg+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <mdSeg+0x1>
 2f0:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <mdSeg>
	if( mdSeg>10 )	//0.001mseg en mdSeg 
 2f4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mdSeg>
 2f8:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <mdSeg+0x1>
 2fc:	0b 97       	sbiw	r24, 0x0b	; 11
 2fe:	90 f0       	brcs	.+36     	; 0x324 <__vector_21+0x52>
	{	
		mdSeg -=10;		
 300:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mdSeg>
 304:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <mdSeg+0x1>
 308:	0a 97       	sbiw	r24, 0x0a	; 10
 30a:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <mdSeg+0x1>
 30e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <mdSeg>
		mSeg++;		//1mseg 
 312:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <mSeg>
 316:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <mSeg+0x1>
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <mSeg+0x1>
 320:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <mSeg>
	}

	if( mSeg >= 500 && !flag500)
 324:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <mSeg>
 328:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <mSeg+0x1>
 32c:	84 3f       	cpi	r24, 0xF4	; 244
 32e:	91 40       	sbci	r25, 0x01	; 1
 330:	60 f0       	brcs	.+24     	; 0x34a <__vector_21+0x78>
 332:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <flag500>
 336:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <flag500+0x1>
 33a:	89 2b       	or	r24, r25
 33c:	31 f4       	brne	.+12     	; 0x34a <__vector_21+0x78>
	{
		flag500 = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <flag500+0x1>
 346:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <flag500>
	}

	if( pressedFlag && (mdSeg <=9)&& (mSeg <=999) )
 34a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__data_end>
 34e:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__data_end+0x1>
 352:	89 2b       	or	r24, r25
 354:	99 f0       	breq	.+38     	; 0x37c <__vector_21+0xaa>
 356:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mdSeg>
 35a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <mdSeg+0x1>
 35e:	0a 97       	sbiw	r24, 0x0a	; 10
 360:	68 f4       	brcc	.+26     	; 0x37c <__vector_21+0xaa>
 362:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <mSeg>
 366:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <mSeg+0x1>
 36a:	88 3e       	cpi	r24, 0xE8	; 232
 36c:	93 40       	sbci	r25, 0x03	; 3
 36e:	30 f4       	brcc	.+12     	; 0x37c <__vector_21+0xaa>
	{
		TCCR0B = 0;
 370:	15 bc       	out	0x25, r1	; 37
		errorFlag = 0;
 372:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <errorFlag+0x1>
 376:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <errorFlag>
 37a:	06 c0       	rjmp	.+12     	; 0x388 <__vector_21+0xb6>
	}else
	{
		errorFlag = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <errorFlag+0x1>
 384:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <errorFlag>
	}
} 
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <__udivmodhi4>:
 398:	aa 1b       	sub	r26, r26
 39a:	bb 1b       	sub	r27, r27
 39c:	51 e1       	ldi	r21, 0x11	; 17
 39e:	07 c0       	rjmp	.+14     	; 0x3ae <__udivmodhi4_ep>

000003a0 <__udivmodhi4_loop>:
 3a0:	aa 1f       	adc	r26, r26
 3a2:	bb 1f       	adc	r27, r27
 3a4:	a6 17       	cp	r26, r22
 3a6:	b7 07       	cpc	r27, r23
 3a8:	10 f0       	brcs	.+4      	; 0x3ae <__udivmodhi4_ep>
 3aa:	a6 1b       	sub	r26, r22
 3ac:	b7 0b       	sbc	r27, r23

000003ae <__udivmodhi4_ep>:
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	5a 95       	dec	r21
 3b4:	a9 f7       	brne	.-22     	; 0x3a0 <__udivmodhi4_loop>
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	bc 01       	movw	r22, r24
 3bc:	cd 01       	movw	r24, r26
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
